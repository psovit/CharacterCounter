return prediction
}
rule1 <- function(x){
prediction <- rep(NA,length(x))
prediction[x > 2.7] <- "spam"
prediction[x < 2.40] <- "nonspam"
prediction[(x >= 2.40 & x<=2.45)] <- "spam"
prediction[(x > 2.45 & x<=2.70)] <- "nonspam"
return(prediction)
}
rule1(smallSpam$capitalAve)
table(rule1(smallSpam$capitalAve),smallSpam$type)
rule2 <- function(x){
prediction <- rep(NA,length(x))
prediction[x > 2.8] <- "spam"
prediction[x <= 2.8] <- "nonspam"
return(prediction)
}
table(rule2(smallSpam$capitalAve),smallSpam$type)
library(caret)
install.packages("caret")
library(caret)
install.packages(“caret”, dependencies = c(“Depends”, “Suggests”))
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("shiny")
install.packages("shiny")
data("iris")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
names(iris)
table(iris$Species)
inTrain <- createDataPartition
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
install.packages("caret")
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
testing
library(ggplot2)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
modFit <- train(Species ~., method="rpart", data=training)
library(rpart)
modFit <- train(Species ~., method="rpart", data=training)
install.packages("e1071")
modFit <- train(Species ~., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main="Classification TRee")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
install.package("rattle")
library(rattle)
install.packages("rattle")
library(rattle)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
library(pgmm)
install.packages("pgmm")
library(pgmm)
library(rpart)
data(segmentationOriginal)
head(segmentationOriginal)
test <- segmentationOriginal[test,]
test <- segmentationOriginal[segmentationOriginal$test,]
test
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.6,
list = FALSE) # 60% training
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Class ~ ., method = "rpart", data = training)
modFit$finalModel
suppressMessages(library(rattle))
fancyRpartPlot(modFit$finalModel)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
head(newdata)
modolive <- train(Area ~ ., method = "rpart", data = olive)
predict(modolive, newdata = newdata)
newdata
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(trainSA)
modFit <- train(chd ~ .,
method = "glm",
data = trainSA, family="binomial")
modFit
missClass(testSA$chd, predict(modFit, newdata = testSA))
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(modFit, newdata = testSA))
missClass(testSA$chd, predict(modFit, newdata = trainSA))
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass(testSA$chd, predict(modFit, newdata = testSA))
missClass(testSA$chd, predict(modFit, newdata = trainSA))
missClass(trainSA$chd, predict(modFit, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.test)
vowel.train
vowel.train$y <- as.factor(vowel.train$y)
vowel.train$y
vowel.test$y
head(vowel.test)
vowel.test$y
modvowel <- randomForest(y ~ ., data = vowel.train)
order(varImp(modvowel), decreasing = T)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
modvowel <- randomForest(y ~ ., data = vowel.train)
order(varImp(modvowel), decreasing = T)
modvowel <- randomForest(y ~ ., data = vowel.train)
library(randomForest)
install.packages("randomForest")
library(randomForest)
modvowel <- randomForest(y ~ ., data = vowel.train)
order(varImp(modvowel), decreasing = T)
install.packages("shiny")
library(shiny)
shinyUI()
library(shiny)
shinyUI(
pageWithSidebar(
#Application title
headerPanel("Diabeted prediction"),
sidebarPanel('glucose','Glucose mg/dl', 90, min=50, max=200, step = 5),
submitButton('Submit')
),
mainPanel(
h3('Results of prediction'),
h4('You entered'),
verbatimTextOutput("inputValue"),
h4('Which resulted in a prediction of '),
verbatimTextOutput("prediction")
)
)
library(shiny)
shinyUI(
pageWithSidebar(
#Application title
headerPanel("Diabeted prediction"),
sidebarPanel
(
numericInput('glucose','Glucose mg/dl', 90, min=50, max=200, step = 5),
submitButton('Submit')
),
mainPanel(
h3('Results of prediction'),
h4('You entered'),
verbatimTextOutput("inputValue"),
h4('Which resulted in a prediction of '),
verbatimTextOutput("prediction")
)
)
)
diabetesRisk <- function(glucose) glucose/200
shinyServer(
function(input, output){
output$inputValue <-renderPrint({input$glucose})
output$prediction <-renderPrint({diabetesRisk(input$glucose)})
}
)
runApp()
runApp()
runApp()
runApp()
runApp()
library(UsingR)
install.packages("UsingR")
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='psovit', token='E4210CFEC5D92B3BF3C990B774735C4C', secret='WVyYbUkTuNy1Fjj99vu462G0K8Oabxb5avXAoR1e')
install.packages("shinyapps")
deployApp()
deployApp()
library(rsconnect)
rsconnect::deployApp()
deployApp()
runApp()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
deployApp(appDir=getwd())
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
mod_gbm <- train(y ~ ., data = vowel.train, method = "gbm")
pred_rf <- predict(mod_rf, vowel.test)
pred_gbm <- predict(mod_gbm, vowel.test)
# Extract accuracies for (1) random forests and (2) boosting
confusionMatrix(pred_rf, vowel.test$y)$overall[1]
confusionMatrix(pred_gbm, vowel.test$y)$overall[1]
insall.packages("knitr")
# Download the training data
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "./pml-training.csv", method = "curl")
# Load the training dataset
testData <- read.csv("./pml-training.csv", na.strings=c("NA","#DIV/0!",""))
# Download the testing data
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = "./pml-testing.csv", method = "curl")
# Load the testing dataset
trainData <- read.csv("./pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "./pml-training.csv", method = "curl")
# Download the training data
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "./R downloads/pml-training.csv", method = "curl")
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "./R downloads/pml-training.csv")
testData <- read.csv("./R downloads/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = "./R downloads/pml-testing.csv")
trainData <- read.csv("./R downloads/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
exists(sovit)
exists("sovit")
exists("testData")
if(!exists("testData")){ print 'a'}
if(!exists("testData")){ print "a"}
if(!exists("testData")){ print( "a")}
if(exists("testData")){ print( "a")}
head(testData
head(testData)
head(testData)
if(!exists("testData"))
{
# Download the training data
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "./R downloads/pml-training.csv")
# Load the training dataset
testData <- read.csv("./R downloads/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
}
if(!exists("trainData"))
{
# Download the testing data
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = "./R downloads/pml-testing.csv")
# Load the testing dataset
trainData <- read.csv("./R downloads/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
}
head(testData)
# Download the training data
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "./R downloads/pml-training.csv")
# Load the training dataset
trainData <- read.csv("./R downloads/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
# Download the testing data
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = "./R downloads/pml-testing.csv")
# Load the testing dataset
testData <- read.csv("./R downloads/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
head(trainData)
trainData.dena
dim(testData)
dim(trainData)
head(trainData)
y <- trainData[ , colSums(is.na(trainData)) == 0]
head(y)
trainData <- trainData[ , colSums(is.na(trainData)) == 0]
head(trainData,3)
colNames(trainData)
colnames(trainData)
remove = c('X', 'user_name', 'raw_timestamp_part_1', 'raw_timestamp_part_2', 'cvtd_timestamp', 'new_window', 'num_window')
y <- trainData[, -which(names(trainData) %in% remove)]
head(y)
remove = c('X', 'user_name', 'raw_timestamp_part_1', 'raw_timestamp_part_2', 'cvtd_timestamp', 'new_window', 'num_window')
trainData <- trainData[, -which(names(trainData) %in% remove)]
colnames(trainData)
library(caret)
trainData= nearZeroVar(trainData[sapply(trainData, is.numeric)], saveMetrics = TRUE)
trainData = trainData[,trainData[, 'nzv']==0]
dim(trainData)
corrMatrix <- cor(na.omit(trainData[sapply(trainData, is.numeric)]))
removecor = findCorrelation(corrMatrix, cutoff = .90, verbose = TRUE)
trainData = trainData[,-removecor]
dim(trainData)
dim(trainData)
trainData <- read.csv("./R downloads/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
testData <- read.csv("./R downloads/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
trainData <- trainData[ , colSums(is.na(trainData)) == 0]
remove = c('X', 'user_name', 'raw_timestamp_part_1', 'raw_timestamp_part_2', 'cvtd_timestamp', 'new_window', 'num_window')
trainData <- trainData[, -which(names(trainData) %in% remove)]
lowVar= nearZeroVar(trainData[sapply(trainData, is.numeric)], saveMetrics = TRUE)
trainData = trainData[,lowVar[, 'nzv']==0]
dim(trainData
)
corrMatrix <- cor(na.omit(trainData[sapply(trainData, is.numeric)]))
removecor = findCorrelation(corrMatrix, cutoff = .90, verbose = TRUE)
y = trainData[,-removecor]
dim(y)
trainData = trainData[,-removecor]
dim(trainData)
inTrain <- createDataPartition(trainData$classe, p=0.7, list=FALSE)
training <- trainData[inTrain,];
testing <- trainData[-inTrain,]
dim(training);dim(testing)
library(tree)
install.packages("tree")
library(rpart
)
modFitDT <- rpart(classe ~ ., data = training, method="class")
fancyRpartPlot(modFitDT)
library(rpart)
modFitDT <- rpart(classe ~ ., data = training, method="class")
fancyRpartPlot(modFitDT)
library(rattle)
fancyRpartPlot(modFitDT)
summary(modFitDT.training)
summary(modFitDT)
set.seed(12345)
modFitRF <- randomForest(classe ~ ., data = training, ntree = 1000)
prediction <- predict(modFitRF, testing, type = "class")
confusionMatrix(prediction, testing$classe)
modFitDT <- rpart(classe ~ ., data = training, method="class")
fancyRpartPlot(modFitDT)
if(!file.exists("./R downloads/pml-training.csv")){
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "./R downloads/pml-training.csv")
}
if(!file.exists("./R downloads/pml-testing.csv")){
# Download the testing data
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = "./R downloads/pml-testing.csv")
}
trainData <- read.csv("./R downloads/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
testData <- read.csv("./R downloads/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
inTrain <- createDataPartition(trainData$classe, p=0.7, list=FALSE)
training <- trainData[inTrain,];
testing <- trainData[-inTrain,]
dim(training);dim(testing);
trainData <- read.csv("./R downloads/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
testData <- read.csv("./R downloads/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
trainData <- trainData[ , colSums(is.na(trainData)) == 0]
remove = c('X', 'user_name', 'raw_timestamp_part_1', 'raw_timestamp_part_2', 'cvtd_timestamp', 'new_window', 'num_window')
trainData <- trainData[, -which(names(trainData) %in% remove)]
library(caret)
lowVar= nearZeroVar(trainData[sapply(trainData, is.numeric)], saveMetrics = TRUE)
trainData = trainData[,lowVar[, 'nzv']==0]
corrMatrix <- cor(na.omit(trainData[sapply(trainData, is.numeric)]))
removecor = findCorrelation(corrMatrix, cutoff = .90, verbose = TRUE)
trainData = trainData[,-removecor]
dim(trainData)
inTrain <- createDataPartition(trainData$classe, p=0.7, list=FALSE)
training <- trainData[inTrain,];
testing <- trainData[-inTrain,]
dim(training);dim(testing);
createDataPartition(trainData$classe, p=0.7, list=FALSE)
?createDataPartition
set.seed(12345)
inTrain <- createDataPartition(trainData$classe, p=0.7, list=FALSE)
training <- trainData[inTrain,];
testing <- trainData[-inTrain,]
trainData$classe
trainData
trainData <- read.csv("./R downloads/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
testData <- read.csv("./R downloads/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
trainData <- trainData[ , colSums(is.na(trainData)) == 0]
remove = c('X', 'user_name', 'raw_timestamp_part_1', 'raw_timestamp_part_2', 'cvtd_timestamp', 'new_window', 'num_window')
trainData <- trainData[, -which(names(trainData) %in% remove)]
lowVar= nearZeroVar(trainData[sapply(trainData, is.numeric)], saveMetrics = TRUE)
trainData = trainData[,lowVar[, 'nzv']==0]
trainData$classe
dim(trainData)
trainData <- read.csv("./R downloads/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
dim(trainData)
modFitRF <- randomForest(classe ~ ., data = training, ntree = 1000)
library(randomForest)
set.seed(12345)
modFitRF <- randomForest(classe ~ ., data = training, ntree = 1000)
training
trainData$classe
testing$classe
colnames(testing)
colnames(trainData)
inTrain
library(randomForest)
set.seed(12345)
modFitRF <- randomForest(classe ~ ., data = training, ntree = 1000)
trainData <- read.csv("./R downloads/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
testData <- read.csv("./R downloads/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
trainData <- trainData[ , colSums(is.na(trainData)) == 0]
remove = c('X', 'user_name', 'raw_timestamp_part_1', 'raw_timestamp_part_2', 'cvtd_timestamp', 'new_window', 'num_window')
trainData <- trainData[, -which(names(trainData) %in% remove)]
lowVar= nearZeroVar(trainData[sapply(trainData, is.numeric)], saveMetrics = TRUE)
trainData = trainData[,lowVar[, 'nzv']==0]
corrMatrix <- cor(na.omit(trainData[sapply(trainData, is.numeric)]))
removecor = findCorrelation(corrMatrix, cutoff = .90, verbose = TRUE)
trainData = trainData[,-removecor]
dim(trainData)
set.seed(12345)
inTrain <- createDataPartition(trainData$classe, p=0.7, list=FALSE)
training <- trainData[inTrain,];
testing <- trainData[-inTrain,]
dim(training);dim(testing);
library(rpart)
library(rattle)
modFitDT <- rpart(classe ~ ., data = training, method="class")
fancyRpartPlot(modFitDT)
set.seed(12345)
prediction <- predict(modFitDT, testing, type = "class")
confusionMatrix(prediction, testing$classe)
set.seed(12345)
modFitRF <- randomForest(classe ~ ., data = training, ntree = 1000)
trainData <- read.csv("./R downloads/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
testData <- read.csv("./R downloads/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
trainData <- trainData[ , colSums(is.na(trainData)) == 0]
remove = c('X', 'user_name', 'raw_timestamp_part_1', 'raw_timestamp_part_2', 'cvtd_timestamp', 'new_window', 'num_window')
trainData <- trainData[, -which(names(trainData) %in% remove)]
lowVar= nearZeroVar(trainData[sapply(trainData, is.numeric)], saveMetrics = TRUE)
trainData = trainData[,lowVar[, 'nzv']==0]
corrMatrix <- cor(na.omit(trainData[sapply(trainData, is.numeric)]))
removecor = findCorrelation(corrMatrix, cutoff = .90, verbose = TRUE)
trainData = trainData[,-removecor]
dim(trainData)
set.seed(12345)
inTrain <- createDataPartition(trainData$classe, p=0.7, list=FALSE)
training <- trainData[inTrain,];
testing <- trainData[-inTrain,]
dim(training);dim(testing);
library(rpart)
library(rattle)
modFitDT <- rpart(classe ~ ., data = training, method="class")
fancyRpartPlot(modFitDT)
set.seed(12345)
prediction <- predict(modFitDT, testing, type = "class")
confusionMatrix(prediction, testing$classe)
set.seed(12345)
modFitRF <- randomForest(classe ~ ., data = training, ntree = 1000)
prediction <- predict(modFitRF, testing, type = "class")
confusionMatrix(prediction, testing$classe)
predictionRF <- predict(modFitRF, testData, type = "class")
predictionRF
library(caret)
library(rpart)
library(rattle)
library(randomForest)
trainData <- read.csv("./R downloads/pml-training.csv", na.strings=c("NA","#DIV/0!",""))
testData <- read.csv("./R downloads/pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
trainData <- trainData[ , colSums(is.na(trainData)) == 0]
remove = c('X', 'user_name', 'raw_timestamp_part_1', 'raw_timestamp_part_2', 'cvtd_timestamp', 'new_window', 'num_window')
trainData <- trainData[, -which(names(trainData) %in% remove)]
lowVar= nearZeroVar(trainData[sapply(trainData, is.numeric)], saveMetrics = TRUE)
trainData = trainData[,lowVar[, 'nzv']==0]
corrMatrix <- cor(na.omit(trainData[sapply(trainData, is.numeric)]))
removecor = findCorrelation(corrMatrix, cutoff = .90, verbose = TRUE)
trainData = trainData[,-removecor]
dim(trainData)
set.seed(12345)
inTrain <- createDataPartition(trainData$classe, p=0.7, list=FALSE)
training <- trainData[inTrain,];
testing <- trainData[-inTrain,]
dim(training);dim(testing);
library(rpart)
library(rattle)
modFitDT <- rpart(classe ~ ., data = training, method="class")
fancyRpartPlot(modFitDT)
set.seed(12345)
prediction <- predict(modFitDT, testing, type = "class")
confusionMatrix(prediction, testing$classe)
set.seed(12345)
modFitRF <- randomForest(classe ~ ., data = training, ntree = 1000)
prediction <- predict(modFitRF, testing, type = "class")
confusionMatrix(prediction, testing$classe)
predictionRF <- predict(modFitRF, testData, type = "class")
predictionRF
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
getwd()
setwd("C:\Users\suraj\Documents\sovit\coursera\data science\RProjs")
setwd("C:\\Users\\suraj\\Documents\\sovit\\coursera\\data science\\RProjs")
author("first_deck")
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
